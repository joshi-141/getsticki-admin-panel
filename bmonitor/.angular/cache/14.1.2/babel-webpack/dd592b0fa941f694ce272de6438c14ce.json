{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = require('tslib');\n\nvar genericMessage = \"Invariant Violation\";\nvar _a = Object.setPrototypeOf,\n    setPrototypeOf = _a === void 0 ? function (obj, proto) {\n  obj.__proto__ = proto;\n  return obj;\n} : _a;\n\nvar InvariantError =\n/** @class */\nfunction (_super) {\n  tslib.__extends(InvariantError, _super);\n\n  function InvariantError(message) {\n    if (message === void 0) {\n      message = genericMessage;\n    }\n\n    var _this = _super.call(this, typeof message === \"number\" ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\" : message) || this;\n\n    _this.framesToPop = 1;\n    _this.name = genericMessage;\n    setPrototypeOf(_this, InvariantError.prototype);\n    return _this;\n  }\n\n  return InvariantError;\n}(Error);\n\nfunction invariant(condition, message) {\n  if (!condition) {\n    throw new InvariantError(message);\n  }\n}\n\nfunction wrapConsoleMethod(method) {\n  return function () {\n    return console[method].apply(console, arguments);\n  };\n}\n\n(function (invariant) {\n  invariant.warn = wrapConsoleMethod(\"warn\");\n  invariant.error = wrapConsoleMethod(\"error\");\n})(invariant || (invariant = {})); // Code that uses ts-invariant with rollup-plugin-invariant may want to\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\n// However, because most ESM-to-CJS compilers will rewrite the process import\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\n// also attempt to define the stub globally when it is not already defined.\n\n\nexports.process = {\n  env: {}\n};\n\nif (typeof process === \"object\") {\n  exports.process = process;\n} else try {\n  // Using Function to evaluate this assignment in global scope also escapes\n  // the strict mode of the current module, thereby allowing the assignment.\n  // Inspired by https://github.com/facebook/regenerator/pull/369.\n  Function(\"stub\", \"process = stub\")(exports.process);\n} catch (atLeastWeTried) {// The assignment can fail if a Content Security Policy heavy-handedly\n  // forbids Function usage. In those environments, developers should take\n  // extra care to replace process.env.NODE_ENV in their production builds,\n  // or define an appropriate global.process polyfill.\n}\n\nvar invariant$1 = invariant;\nexports.default = invariant$1;\nexports.InvariantError = InvariantError;\nexports.invariant = invariant;","map":{"version":3,"names":["Object","defineProperty","exports","value","tslib","require","genericMessage","_a","setPrototypeOf","obj","proto","__proto__","InvariantError","_super","__extends","message","_this","call","framesToPop","name","prototype","Error","invariant","condition","wrapConsoleMethod","method","console","apply","arguments","warn","error","process","env","Function","atLeastWeTried","invariant$1","default"],"sources":["/Users/phoungeunvantho/B.COM/bmonitor.com/bmonitor/node_modules/ts-invariant/lib/invariant.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar tslib = require('tslib');\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    tslib.__extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nfunction wrapConsoleMethod(method) {\r\n    return function () {\r\n        return console[method].apply(console, arguments);\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\n// However, because most ESM-to-CJS compilers will rewrite the process import\r\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\r\n// also attempt to define the stub globally when it is not already defined.\r\nexports.process = { env: {} };\r\nif (typeof process === \"object\") {\r\n    exports.process = process;\r\n}\r\nelse\r\n    try {\r\n        // Using Function to evaluate this assignment in global scope also escapes\r\n        // the strict mode of the current module, thereby allowing the assignment.\r\n        // Inspired by https://github.com/facebook/regenerator/pull/369.\r\n        Function(\"stub\", \"process = stub\")(exports.process);\r\n    }\r\n    catch (atLeastWeTried) {\r\n        // The assignment can fail if a Content Security Policy heavy-handedly\r\n        // forbids Function usage. In those environments, developers should take\r\n        // extra care to replace process.env.NODE_ENV in their production builds,\r\n        // or define an appropriate global.process polyfill.\r\n    }\r\nvar invariant$1 = invariant;\n\nexports.default = invariant$1;\nexports.InvariantError = InvariantError;\nexports.invariant = invariant;\n"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;EAAEC,KAAK,EAAE;AAAT,CAA7C;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAAnB;;AAEA,IAAIC,cAAc,GAAG,qBAArB;AACA,IAAIC,EAAE,GAAGP,MAAM,CAACQ,cAAhB;AAAA,IAAgCA,cAAc,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,UAAUE,GAAV,EAAeC,KAAf,EAAsB;EACnFD,GAAG,CAACE,SAAJ,GAAgBD,KAAhB;EACA,OAAOD,GAAP;AACH,CAHgD,GAG7CF,EAHJ;;AAIA,IAAIK,cAAc;AAAG;AAAe,UAAUC,MAAV,EAAkB;EAClDT,KAAK,CAACU,SAAN,CAAgBF,cAAhB,EAAgCC,MAAhC;;EACA,SAASD,cAAT,CAAwBG,OAAxB,EAAiC;IAC7B,IAAIA,OAAO,KAAK,KAAK,CAArB,EAAwB;MAAEA,OAAO,GAAGT,cAAV;IAA2B;;IACrD,IAAIU,KAAK,GAAGH,MAAM,CAACI,IAAP,CAAY,IAAZ,EAAkB,OAAOF,OAAP,KAAmB,QAAnB,GACxBT,cAAc,GAAG,IAAjB,GAAwBS,OAAxB,GAAkC,4DADV,GAExBA,OAFM,KAEM,IAFlB;;IAGAC,KAAK,CAACE,WAAN,GAAoB,CAApB;IACAF,KAAK,CAACG,IAAN,GAAab,cAAb;IACAE,cAAc,CAACQ,KAAD,EAAQJ,cAAc,CAACQ,SAAvB,CAAd;IACA,OAAOJ,KAAP;EACH;;EACD,OAAOJ,cAAP;AACH,CAbmC,CAalCS,KAbkC,CAApC;;AAcA,SAASC,SAAT,CAAmBC,SAAnB,EAA8BR,OAA9B,EAAuC;EACnC,IAAI,CAACQ,SAAL,EAAgB;IACZ,MAAM,IAAIX,cAAJ,CAAmBG,OAAnB,CAAN;EACH;AACJ;;AACD,SAASS,iBAAT,CAA2BC,MAA3B,EAAmC;EAC/B,OAAO,YAAY;IACf,OAAOC,OAAO,CAACD,MAAD,CAAP,CAAgBE,KAAhB,CAAsBD,OAAtB,EAA+BE,SAA/B,CAAP;EACH,CAFD;AAGH;;AACD,CAAC,UAAUN,SAAV,EAAqB;EAClBA,SAAS,CAACO,IAAV,GAAiBL,iBAAiB,CAAC,MAAD,CAAlC;EACAF,SAAS,CAACQ,KAAV,GAAkBN,iBAAiB,CAAC,OAAD,CAAnC;AACH,CAHD,EAGGF,SAAS,KAAKA,SAAS,GAAG,EAAjB,CAHZ,E,CAIA;AACA;AACA;AACA;AACA;;;AACApB,OAAO,CAAC6B,OAAR,GAAkB;EAAEC,GAAG,EAAE;AAAP,CAAlB;;AACA,IAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;EAC7B7B,OAAO,CAAC6B,OAAR,GAAkBA,OAAlB;AACH,CAFD,MAII,IAAI;EACA;EACA;EACA;EACAE,QAAQ,CAAC,MAAD,EAAS,gBAAT,CAAR,CAAmC/B,OAAO,CAAC6B,OAA3C;AACH,CALD,CAMA,OAAOG,cAAP,EAAuB,CACnB;EACA;EACA;EACA;AACH;;AACL,IAAIC,WAAW,GAAGb,SAAlB;AAEApB,OAAO,CAACkC,OAAR,GAAkBD,WAAlB;AACAjC,OAAO,CAACU,cAAR,GAAyBA,cAAzB;AACAV,OAAO,CAACoB,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}