{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { createFragmentMap, getFragmentFromSelection, getDefaultValues, getFragmentDefinitions, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField } from \"../../utilities/index.js\";\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, isArray } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n;\n\nfunction getContextFlavor(context, clientOnly, deferred) {\n  var key = \"\".concat(clientOnly).concat(deferred);\n  var flavored = context.flavors.get(key);\n\n  if (!flavored) {\n    context.flavors.set(key, flavored = context.clientOnly === clientOnly && context.deferred === deferred ? context : __assign(__assign({}, context), {\n      clientOnly: clientOnly,\n      deferred: deferred\n    }));\n  }\n\n  return flavored;\n}\n\nvar StoreWriter = function () {\n  function StoreWriter(cache, reader) {\n    this.cache = cache;\n    this.reader = reader;\n  }\n\n  StoreWriter.prototype.writeToStore = function (store, _a) {\n    var _this = this;\n\n    var query = _a.query,\n        result = _a.result,\n        dataId = _a.dataId,\n        variables = _a.variables,\n        overwrite = _a.overwrite;\n    var operationDefinition = getOperationDefinition(query);\n    var merger = makeProcessedFieldsMerger();\n    variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n    var context = {\n      store: store,\n      written: Object.create(null),\n      merge: function (existing, incoming) {\n        return merger.merge(existing, incoming);\n      },\n      variables: variables,\n      varString: canonicalStringify(variables),\n      fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n      overwrite: !!overwrite,\n      incomingById: new Map(),\n      clientOnly: false,\n      deferred: false,\n      flavors: new Map()\n    };\n    var ref = this.processSelectionSet({\n      result: result || Object.create(null),\n      dataId: dataId,\n      selectionSet: operationDefinition.selectionSet,\n      mergeTree: {\n        map: new Map()\n      },\n      context: context\n    });\n\n    if (!isReference(ref)) {\n      throw __DEV__ ? new InvariantError(\"Could not identify object \".concat(JSON.stringify(result))) : new InvariantError(6);\n    }\n\n    context.incomingById.forEach(function (_a, dataId) {\n      var storeObject = _a.storeObject,\n          mergeTree = _a.mergeTree,\n          fieldNodeSet = _a.fieldNodeSet;\n      var entityRef = makeReference(dataId);\n\n      if (mergeTree && mergeTree.map.size) {\n        var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n\n        if (isReference(applied)) {\n          return;\n        }\n\n        storeObject = applied;\n      }\n\n      if (__DEV__ && !context.overwrite) {\n        var fieldsWithSelectionSets_1 = Object.create(null);\n        fieldNodeSet.forEach(function (field) {\n          if (field.selectionSet) {\n            fieldsWithSelectionSets_1[field.name.value] = true;\n          }\n        });\n\n        var hasSelectionSet_1 = function (storeFieldName) {\n          return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;\n        };\n\n        var hasMergeFunction_1 = function (storeFieldName) {\n          var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n          return Boolean(childTree && childTree.info && childTree.info.merge);\n        };\n\n        Object.keys(storeObject).forEach(function (storeFieldName) {\n          if (hasSelectionSet_1(storeFieldName) && !hasMergeFunction_1(storeFieldName)) {\n            warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n          }\n        });\n      }\n\n      store.merge(dataId, storeObject);\n    });\n    store.retain(ref.__ref);\n    return ref;\n  };\n\n  StoreWriter.prototype.processSelectionSet = function (_a) {\n    var _this = this;\n\n    var dataId = _a.dataId,\n        result = _a.result,\n        selectionSet = _a.selectionSet,\n        context = _a.context,\n        mergeTree = _a.mergeTree;\n    var policies = this.cache.policies;\n    var incoming = Object.create(null);\n    var typename = dataId && policies.rootTypenamesById[dataId] || getTypenameFromResult(result, selectionSet, context.fragmentMap) || dataId && context.store.get(dataId, \"__typename\");\n\n    if (\"string\" === typeof typename) {\n      incoming.__typename = typename;\n    }\n\n    var readField = function () {\n      var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n\n      if (isReference(options.from)) {\n        var info = context.incomingById.get(options.from.__ref);\n\n        if (info) {\n          var result_1 = policies.readField(__assign(__assign({}, options), {\n            from: info.storeObject\n          }), context);\n\n          if (result_1 !== void 0) {\n            return result_1;\n          }\n        }\n      }\n\n      return policies.readField(options, context);\n    };\n\n    var fieldNodeSet = new Set();\n    this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {\n      var _a;\n\n      var resultFieldKey = resultKeyNameFromField(field);\n      var value = result[resultFieldKey];\n      fieldNodeSet.add(field);\n\n      if (value !== void 0) {\n        var storeFieldName = policies.getStoreFieldName({\n          typename: typename,\n          fieldName: field.name.value,\n          field: field,\n          variables: context.variables\n        });\n        var childTree = getChildMergeTree(mergeTree, storeFieldName);\n\n        var incomingValue = _this.processFieldValue(value, field, field.selectionSet ? getContextFlavor(context, false, false) : context, childTree);\n\n        var childTypename = void 0;\n\n        if (field.selectionSet && (isReference(incomingValue) || storeValueIsStoreObject(incomingValue))) {\n          childTypename = readField(\"__typename\", incomingValue);\n        }\n\n        var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n\n        if (merge) {\n          childTree.info = {\n            field: field,\n            typename: typename,\n            merge: merge\n          };\n        } else {\n          maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n        }\n\n        incoming = context.merge(incoming, (_a = {}, _a[storeFieldName] = incomingValue, _a));\n      } else if (__DEV__ && !context.clientOnly && !context.deferred && !addTypenameToDocument.added(field) && !policies.getReadFunction(typename, field.name.value)) {\n        __DEV__ && invariant.error(\"Missing field '\".concat(resultKeyNameFromField(field), \"' while writing result \").concat(JSON.stringify(result, null, 2)).substring(0, 1000));\n      }\n    });\n\n    try {\n      var _b = policies.identify(result, {\n        typename: typename,\n        selectionSet: selectionSet,\n        fragmentMap: context.fragmentMap,\n        storeObject: incoming,\n        readField: readField\n      }),\n          id = _b[0],\n          keyObject = _b[1];\n\n      dataId = dataId || id;\n\n      if (keyObject) {\n        incoming = context.merge(incoming, keyObject);\n      }\n    } catch (e) {\n      if (!dataId) throw e;\n    }\n\n    if (\"string\" === typeof dataId) {\n      var dataRef = makeReference(dataId);\n      var sets = context.written[dataId] || (context.written[dataId] = []);\n      if (sets.indexOf(selectionSet) >= 0) return dataRef;\n      sets.push(selectionSet);\n\n      if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n        return dataRef;\n      }\n\n      var previous_1 = context.incomingById.get(dataId);\n\n      if (previous_1) {\n        previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n        previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n        fieldNodeSet.forEach(function (field) {\n          return previous_1.fieldNodeSet.add(field);\n        });\n      } else {\n        context.incomingById.set(dataId, {\n          storeObject: incoming,\n          mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n          fieldNodeSet: fieldNodeSet\n        });\n      }\n\n      return dataRef;\n    }\n\n    return incoming;\n  };\n\n  StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n    var _this = this;\n\n    if (!field.selectionSet || value === null) {\n      return __DEV__ ? cloneDeep(value) : value;\n    }\n\n    if (isArray(value)) {\n      return value.map(function (item, i) {\n        var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n\n        maybeRecycleChildMergeTree(mergeTree, i);\n        return value;\n      });\n    }\n\n    return this.processSelectionSet({\n      result: value,\n      selectionSet: field.selectionSet,\n      context: context,\n      mergeTree: mergeTree\n    });\n  };\n\n  StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n    if (typename === void 0) {\n      typename = getTypenameFromResult(result, selectionSet, context.fragmentMap);\n    }\n\n    var fieldMap = new Map();\n    var policies = this.cache.policies;\n    var limitingTrie = new Trie(false);\n\n    (function flatten(selectionSet, inheritedContext) {\n      var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);\n      if (visitedNode.visited) return;\n      visitedNode.visited = true;\n      selectionSet.selections.forEach(function (selection) {\n        if (!shouldInclude(selection, context.variables)) return;\n        var clientOnly = inheritedContext.clientOnly,\n            deferred = inheritedContext.deferred;\n\n        if (!(clientOnly && deferred) && isNonEmptyArray(selection.directives)) {\n          selection.directives.forEach(function (dir) {\n            var name = dir.name.value;\n            if (name === \"client\") clientOnly = true;\n\n            if (name === \"defer\") {\n              var args = argumentsObjectFromField(dir, context.variables);\n\n              if (!args || args.if !== false) {\n                deferred = true;\n              }\n            }\n          });\n        }\n\n        if (isField(selection)) {\n          var existing = fieldMap.get(selection);\n\n          if (existing) {\n            clientOnly = clientOnly && existing.clientOnly;\n            deferred = deferred && existing.deferred;\n          }\n\n          fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n        } else {\n          var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n\n          if (fragment && policies.fragmentMatches(fragment, typename, result, context.variables)) {\n            flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n          }\n        }\n      });\n    })(selectionSet, context);\n\n    return fieldMap;\n  };\n\n  StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n    var _a;\n\n    var _this = this;\n\n    if (mergeTree.map.size && !isReference(incoming)) {\n      var e_1 = !isArray(incoming) && (isReference(existing) || storeValueIsStoreObject(existing)) ? existing : void 0;\n      var i_1 = incoming;\n\n      if (e_1 && !getStorageArgs) {\n        getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n      }\n\n      var changedFields_1;\n\n      var getValue_1 = function (from, name) {\n        return isArray(from) ? typeof name === \"number\" ? from[name] : void 0 : context.store.getFieldValue(from, String(name));\n      };\n\n      mergeTree.map.forEach(function (childTree, storeFieldName) {\n        var eVal = getValue_1(e_1, storeFieldName);\n        var iVal = getValue_1(i_1, storeFieldName);\n        if (void 0 === iVal) return;\n\n        if (getStorageArgs) {\n          getStorageArgs.push(storeFieldName);\n        }\n\n        var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n\n        if (aVal !== iVal) {\n          changedFields_1 = changedFields_1 || new Map();\n          changedFields_1.set(storeFieldName, aVal);\n        }\n\n        if (getStorageArgs) {\n          invariant(getStorageArgs.pop() === storeFieldName);\n        }\n      });\n\n      if (changedFields_1) {\n        incoming = isArray(i_1) ? i_1.slice(0) : __assign({}, i_1);\n        changedFields_1.forEach(function (value, name) {\n          incoming[name] = value;\n        });\n      }\n    }\n\n    if (mergeTree.info) {\n      return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n    }\n\n    return incoming;\n  };\n\n  return StoreWriter;\n}();\n\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\n\nfunction getChildMergeTree(_a, name) {\n  var map = _a.map;\n\n  if (!map.has(name)) {\n    map.set(name, emptyMergeTreePool.pop() || {\n      map: new Map()\n    });\n  }\n\n  return map.get(name);\n}\n\nfunction mergeMergeTrees(left, right) {\n  if (left === right || !right || mergeTreeIsEmpty(right)) return left;\n  if (!left || mergeTreeIsEmpty(left)) return right;\n  var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n  var needToMergeMaps = left.map.size && right.map.size;\n  var map = needToMergeMaps ? new Map() : left.map.size ? left.map : right.map;\n  var merged = {\n    info: info,\n    map: map\n  };\n\n  if (needToMergeMaps) {\n    var remainingRightKeys_1 = new Set(right.map.keys());\n    left.map.forEach(function (leftTree, key) {\n      merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n      remainingRightKeys_1.delete(key);\n    });\n    remainingRightKeys_1.forEach(function (key) {\n      merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n    });\n  }\n\n  return merged;\n}\n\nfunction mergeTreeIsEmpty(tree) {\n  return !tree || !(tree.info || tree.map.size);\n}\n\nfunction maybeRecycleChildMergeTree(_a, name) {\n  var map = _a.map;\n  var childTree = map.get(name);\n\n  if (childTree && mergeTreeIsEmpty(childTree)) {\n    emptyMergeTreePool.push(childTree);\n    map.delete(name);\n  }\n}\n\nvar warnings = new Set();\n\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n  var getChild = function (objOrRef) {\n    var child = store.getFieldValue(objOrRef, storeFieldName);\n    return typeof child === \"object\" && child;\n  };\n\n  var existing = getChild(existingRef);\n  if (!existing) return;\n  var incoming = getChild(incomingObj);\n  if (!incoming) return;\n  if (isReference(existing)) return;\n  if (equal(existing, incoming)) return;\n\n  if (Object.keys(existing).every(function (key) {\n    return store.getFieldValue(incoming, key) !== void 0;\n  })) {\n    return;\n  }\n\n  var parentType = store.getFieldValue(existingRef, \"__typename\") || store.getFieldValue(incomingObj, \"__typename\");\n  var fieldName = fieldNameFromStoreName(storeFieldName);\n  var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n  if (warnings.has(typeDotName)) return;\n  warnings.add(typeDotName);\n  var childTypenames = [];\n\n  if (!isArray(existing) && !isArray(incoming)) {\n    [existing, incoming].forEach(function (child) {\n      var typename = store.getFieldValue(child, \"__typename\");\n\n      if (typeof typename === \"string\" && !childTypenames.includes(typename)) {\n        childTypenames.push(typename);\n      }\n    });\n  }\n\n  __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \".concat(fieldName, \" field of a \").concat(parentType, \" object.\\n\\nTo address this problem (which is not a bug in Apollo Client), \").concat(childTypenames.length ? \"either ensure all objects of type \" + childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \" : \"\", \"define a custom merge function for the \").concat(typeDotName, \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \").concat(JSON.stringify(existing).slice(0, 1000), \"\\n  incoming: \").concat(JSON.stringify(incoming).slice(0, 1000), \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\"));\n}","map":{"version":3,"names":["__assign","invariant","InvariantError","equal","Trie","createFragmentMap","getFragmentFromSelection","getDefaultValues","getFragmentDefinitions","getOperationDefinition","getTypenameFromResult","makeReference","isField","resultKeyNameFromField","isReference","shouldInclude","cloneDeep","addTypenameToDocument","isNonEmptyArray","argumentsObjectFromField","makeProcessedFieldsMerger","fieldNameFromStoreName","storeValueIsStoreObject","isArray","canonicalStringify","normalizeReadFieldOptions","getContextFlavor","context","clientOnly","deferred","key","concat","flavored","flavors","get","set","StoreWriter","cache","reader","prototype","writeToStore","store","_a","_this","query","result","dataId","variables","overwrite","operationDefinition","merger","written","Object","create","merge","existing","incoming","varString","fragmentMap","incomingById","Map","ref","processSelectionSet","selectionSet","mergeTree","map","__DEV__","JSON","stringify","forEach","storeObject","fieldNodeSet","entityRef","size","applied","applyMerges","fieldsWithSelectionSets_1","field","name","value","hasSelectionSet_1","storeFieldName","hasMergeFunction_1","childTree","Boolean","info","keys","warnAboutDataLoss","retain","__ref","policies","typename","rootTypenamesById","__typename","readField","options","arguments","from","result_1","Set","flattenFields","resultFieldKey","add","getStoreFieldName","fieldName","getChildMergeTree","incomingValue","processFieldValue","childTypename","getMergeFunction","maybeRecycleChildMergeTree","added","getReadFunction","error","substring","_b","identify","id","keyObject","e","dataRef","sets","indexOf","push","isFresh","previous_1","mergeMergeTrees","mergeTreeIsEmpty","item","i","fieldMap","limitingTrie","flatten","inheritedContext","visitedNode","lookup","visited","selections","selection","directives","dir","args","if","fragment","fragmentMatches","getStorageArgs","e_1","i_1","changedFields_1","getValue_1","getFieldValue","String","eVal","iVal","aVal","pop","slice","runMergeFunction","getStorage","apply","emptyMergeTreePool","has","left","right","needToMergeMaps","merged","remainingRightKeys_1","leftTree","delete","tree","warnings","existingRef","incomingObj","getChild","objOrRef","child","every","parentType","typeDotName","childTypenames","includes","warn","length","join"],"sources":["/Users/phoungeunvantho/B.COM/bmonitor.com/bmonitor/node_modules/@apollo/client/cache/inmemory/writeToStore.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { invariant, InvariantError } from \"../../utilities/globals/index.js\";\nimport { equal } from '@wry/equality';\nimport { Trie } from '@wry/trie';\nimport { createFragmentMap, getFragmentFromSelection, getDefaultValues, getFragmentDefinitions, getOperationDefinition, getTypenameFromResult, makeReference, isField, resultKeyNameFromField, isReference, shouldInclude, cloneDeep, addTypenameToDocument, isNonEmptyArray, argumentsObjectFromField, } from \"../../utilities/index.js\";\nimport { makeProcessedFieldsMerger, fieldNameFromStoreName, storeValueIsStoreObject, isArray } from \"./helpers.js\";\nimport { canonicalStringify } from \"./object-canon.js\";\nimport { normalizeReadFieldOptions } from \"./policies.js\";\n;\nfunction getContextFlavor(context, clientOnly, deferred) {\n    var key = \"\".concat(clientOnly).concat(deferred);\n    var flavored = context.flavors.get(key);\n    if (!flavored) {\n        context.flavors.set(key, flavored = (context.clientOnly === clientOnly &&\n            context.deferred === deferred) ? context : __assign(__assign({}, context), { clientOnly: clientOnly, deferred: deferred }));\n    }\n    return flavored;\n}\nvar StoreWriter = (function () {\n    function StoreWriter(cache, reader) {\n        this.cache = cache;\n        this.reader = reader;\n    }\n    StoreWriter.prototype.writeToStore = function (store, _a) {\n        var _this = this;\n        var query = _a.query, result = _a.result, dataId = _a.dataId, variables = _a.variables, overwrite = _a.overwrite;\n        var operationDefinition = getOperationDefinition(query);\n        var merger = makeProcessedFieldsMerger();\n        variables = __assign(__assign({}, getDefaultValues(operationDefinition)), variables);\n        var context = {\n            store: store,\n            written: Object.create(null),\n            merge: function (existing, incoming) {\n                return merger.merge(existing, incoming);\n            },\n            variables: variables,\n            varString: canonicalStringify(variables),\n            fragmentMap: createFragmentMap(getFragmentDefinitions(query)),\n            overwrite: !!overwrite,\n            incomingById: new Map,\n            clientOnly: false,\n            deferred: false,\n            flavors: new Map,\n        };\n        var ref = this.processSelectionSet({\n            result: result || Object.create(null),\n            dataId: dataId,\n            selectionSet: operationDefinition.selectionSet,\n            mergeTree: { map: new Map },\n            context: context,\n        });\n        if (!isReference(ref)) {\n            throw __DEV__ ? new InvariantError(\"Could not identify object \".concat(JSON.stringify(result))) : new InvariantError(6);\n        }\n        context.incomingById.forEach(function (_a, dataId) {\n            var storeObject = _a.storeObject, mergeTree = _a.mergeTree, fieldNodeSet = _a.fieldNodeSet;\n            var entityRef = makeReference(dataId);\n            if (mergeTree && mergeTree.map.size) {\n                var applied = _this.applyMerges(mergeTree, entityRef, storeObject, context);\n                if (isReference(applied)) {\n                    return;\n                }\n                storeObject = applied;\n            }\n            if (__DEV__ && !context.overwrite) {\n                var fieldsWithSelectionSets_1 = Object.create(null);\n                fieldNodeSet.forEach(function (field) {\n                    if (field.selectionSet) {\n                        fieldsWithSelectionSets_1[field.name.value] = true;\n                    }\n                });\n                var hasSelectionSet_1 = function (storeFieldName) {\n                    return fieldsWithSelectionSets_1[fieldNameFromStoreName(storeFieldName)] === true;\n                };\n                var hasMergeFunction_1 = function (storeFieldName) {\n                    var childTree = mergeTree && mergeTree.map.get(storeFieldName);\n                    return Boolean(childTree && childTree.info && childTree.info.merge);\n                };\n                Object.keys(storeObject).forEach(function (storeFieldName) {\n                    if (hasSelectionSet_1(storeFieldName) &&\n                        !hasMergeFunction_1(storeFieldName)) {\n                        warnAboutDataLoss(entityRef, storeObject, storeFieldName, context.store);\n                    }\n                });\n            }\n            store.merge(dataId, storeObject);\n        });\n        store.retain(ref.__ref);\n        return ref;\n    };\n    StoreWriter.prototype.processSelectionSet = function (_a) {\n        var _this = this;\n        var dataId = _a.dataId, result = _a.result, selectionSet = _a.selectionSet, context = _a.context, mergeTree = _a.mergeTree;\n        var policies = this.cache.policies;\n        var incoming = Object.create(null);\n        var typename = (dataId && policies.rootTypenamesById[dataId]) ||\n            getTypenameFromResult(result, selectionSet, context.fragmentMap) ||\n            (dataId && context.store.get(dataId, \"__typename\"));\n        if (\"string\" === typeof typename) {\n            incoming.__typename = typename;\n        }\n        var readField = function () {\n            var options = normalizeReadFieldOptions(arguments, incoming, context.variables);\n            if (isReference(options.from)) {\n                var info = context.incomingById.get(options.from.__ref);\n                if (info) {\n                    var result_1 = policies.readField(__assign(__assign({}, options), { from: info.storeObject }), context);\n                    if (result_1 !== void 0) {\n                        return result_1;\n                    }\n                }\n            }\n            return policies.readField(options, context);\n        };\n        var fieldNodeSet = new Set();\n        this.flattenFields(selectionSet, result, context, typename).forEach(function (context, field) {\n            var _a;\n            var resultFieldKey = resultKeyNameFromField(field);\n            var value = result[resultFieldKey];\n            fieldNodeSet.add(field);\n            if (value !== void 0) {\n                var storeFieldName = policies.getStoreFieldName({\n                    typename: typename,\n                    fieldName: field.name.value,\n                    field: field,\n                    variables: context.variables,\n                });\n                var childTree = getChildMergeTree(mergeTree, storeFieldName);\n                var incomingValue = _this.processFieldValue(value, field, field.selectionSet\n                    ? getContextFlavor(context, false, false)\n                    : context, childTree);\n                var childTypename = void 0;\n                if (field.selectionSet &&\n                    (isReference(incomingValue) ||\n                        storeValueIsStoreObject(incomingValue))) {\n                    childTypename = readField(\"__typename\", incomingValue);\n                }\n                var merge = policies.getMergeFunction(typename, field.name.value, childTypename);\n                if (merge) {\n                    childTree.info = {\n                        field: field,\n                        typename: typename,\n                        merge: merge,\n                    };\n                }\n                else {\n                    maybeRecycleChildMergeTree(mergeTree, storeFieldName);\n                }\n                incoming = context.merge(incoming, (_a = {},\n                    _a[storeFieldName] = incomingValue,\n                    _a));\n            }\n            else if (__DEV__ &&\n                !context.clientOnly &&\n                !context.deferred &&\n                !addTypenameToDocument.added(field) &&\n                !policies.getReadFunction(typename, field.name.value)) {\n                __DEV__ && invariant.error(\"Missing field '\".concat(resultKeyNameFromField(field), \"' while writing result \").concat(JSON.stringify(result, null, 2)).substring(0, 1000));\n            }\n        });\n        try {\n            var _b = policies.identify(result, {\n                typename: typename,\n                selectionSet: selectionSet,\n                fragmentMap: context.fragmentMap,\n                storeObject: incoming,\n                readField: readField,\n            }), id = _b[0], keyObject = _b[1];\n            dataId = dataId || id;\n            if (keyObject) {\n                incoming = context.merge(incoming, keyObject);\n            }\n        }\n        catch (e) {\n            if (!dataId)\n                throw e;\n        }\n        if (\"string\" === typeof dataId) {\n            var dataRef = makeReference(dataId);\n            var sets = context.written[dataId] || (context.written[dataId] = []);\n            if (sets.indexOf(selectionSet) >= 0)\n                return dataRef;\n            sets.push(selectionSet);\n            if (this.reader && this.reader.isFresh(result, dataRef, selectionSet, context)) {\n                return dataRef;\n            }\n            var previous_1 = context.incomingById.get(dataId);\n            if (previous_1) {\n                previous_1.storeObject = context.merge(previous_1.storeObject, incoming);\n                previous_1.mergeTree = mergeMergeTrees(previous_1.mergeTree, mergeTree);\n                fieldNodeSet.forEach(function (field) { return previous_1.fieldNodeSet.add(field); });\n            }\n            else {\n                context.incomingById.set(dataId, {\n                    storeObject: incoming,\n                    mergeTree: mergeTreeIsEmpty(mergeTree) ? void 0 : mergeTree,\n                    fieldNodeSet: fieldNodeSet,\n                });\n            }\n            return dataRef;\n        }\n        return incoming;\n    };\n    StoreWriter.prototype.processFieldValue = function (value, field, context, mergeTree) {\n        var _this = this;\n        if (!field.selectionSet || value === null) {\n            return __DEV__ ? cloneDeep(value) : value;\n        }\n        if (isArray(value)) {\n            return value.map(function (item, i) {\n                var value = _this.processFieldValue(item, field, context, getChildMergeTree(mergeTree, i));\n                maybeRecycleChildMergeTree(mergeTree, i);\n                return value;\n            });\n        }\n        return this.processSelectionSet({\n            result: value,\n            selectionSet: field.selectionSet,\n            context: context,\n            mergeTree: mergeTree,\n        });\n    };\n    StoreWriter.prototype.flattenFields = function (selectionSet, result, context, typename) {\n        if (typename === void 0) { typename = getTypenameFromResult(result, selectionSet, context.fragmentMap); }\n        var fieldMap = new Map();\n        var policies = this.cache.policies;\n        var limitingTrie = new Trie(false);\n        (function flatten(selectionSet, inheritedContext) {\n            var visitedNode = limitingTrie.lookup(selectionSet, inheritedContext.clientOnly, inheritedContext.deferred);\n            if (visitedNode.visited)\n                return;\n            visitedNode.visited = true;\n            selectionSet.selections.forEach(function (selection) {\n                if (!shouldInclude(selection, context.variables))\n                    return;\n                var clientOnly = inheritedContext.clientOnly, deferred = inheritedContext.deferred;\n                if (!(clientOnly && deferred) &&\n                    isNonEmptyArray(selection.directives)) {\n                    selection.directives.forEach(function (dir) {\n                        var name = dir.name.value;\n                        if (name === \"client\")\n                            clientOnly = true;\n                        if (name === \"defer\") {\n                            var args = argumentsObjectFromField(dir, context.variables);\n                            if (!args || args.if !== false) {\n                                deferred = true;\n                            }\n                        }\n                    });\n                }\n                if (isField(selection)) {\n                    var existing = fieldMap.get(selection);\n                    if (existing) {\n                        clientOnly = clientOnly && existing.clientOnly;\n                        deferred = deferred && existing.deferred;\n                    }\n                    fieldMap.set(selection, getContextFlavor(context, clientOnly, deferred));\n                }\n                else {\n                    var fragment = getFragmentFromSelection(selection, context.fragmentMap);\n                    if (fragment &&\n                        policies.fragmentMatches(fragment, typename, result, context.variables)) {\n                        flatten(fragment.selectionSet, getContextFlavor(context, clientOnly, deferred));\n                    }\n                }\n            });\n        })(selectionSet, context);\n        return fieldMap;\n    };\n    StoreWriter.prototype.applyMerges = function (mergeTree, existing, incoming, context, getStorageArgs) {\n        var _a;\n        var _this = this;\n        if (mergeTree.map.size && !isReference(incoming)) {\n            var e_1 = (!isArray(incoming) &&\n                (isReference(existing) || storeValueIsStoreObject(existing))) ? existing : void 0;\n            var i_1 = incoming;\n            if (e_1 && !getStorageArgs) {\n                getStorageArgs = [isReference(e_1) ? e_1.__ref : e_1];\n            }\n            var changedFields_1;\n            var getValue_1 = function (from, name) {\n                return isArray(from)\n                    ? (typeof name === \"number\" ? from[name] : void 0)\n                    : context.store.getFieldValue(from, String(name));\n            };\n            mergeTree.map.forEach(function (childTree, storeFieldName) {\n                var eVal = getValue_1(e_1, storeFieldName);\n                var iVal = getValue_1(i_1, storeFieldName);\n                if (void 0 === iVal)\n                    return;\n                if (getStorageArgs) {\n                    getStorageArgs.push(storeFieldName);\n                }\n                var aVal = _this.applyMerges(childTree, eVal, iVal, context, getStorageArgs);\n                if (aVal !== iVal) {\n                    changedFields_1 = changedFields_1 || new Map;\n                    changedFields_1.set(storeFieldName, aVal);\n                }\n                if (getStorageArgs) {\n                    invariant(getStorageArgs.pop() === storeFieldName);\n                }\n            });\n            if (changedFields_1) {\n                incoming = (isArray(i_1) ? i_1.slice(0) : __assign({}, i_1));\n                changedFields_1.forEach(function (value, name) {\n                    incoming[name] = value;\n                });\n            }\n        }\n        if (mergeTree.info) {\n            return this.cache.policies.runMergeFunction(existing, incoming, mergeTree.info, context, getStorageArgs && (_a = context.store).getStorage.apply(_a, getStorageArgs));\n        }\n        return incoming;\n    };\n    return StoreWriter;\n}());\nexport { StoreWriter };\nvar emptyMergeTreePool = [];\nfunction getChildMergeTree(_a, name) {\n    var map = _a.map;\n    if (!map.has(name)) {\n        map.set(name, emptyMergeTreePool.pop() || { map: new Map });\n    }\n    return map.get(name);\n}\nfunction mergeMergeTrees(left, right) {\n    if (left === right || !right || mergeTreeIsEmpty(right))\n        return left;\n    if (!left || mergeTreeIsEmpty(left))\n        return right;\n    var info = left.info && right.info ? __assign(__assign({}, left.info), right.info) : left.info || right.info;\n    var needToMergeMaps = left.map.size && right.map.size;\n    var map = needToMergeMaps ? new Map :\n        left.map.size ? left.map : right.map;\n    var merged = { info: info, map: map };\n    if (needToMergeMaps) {\n        var remainingRightKeys_1 = new Set(right.map.keys());\n        left.map.forEach(function (leftTree, key) {\n            merged.map.set(key, mergeMergeTrees(leftTree, right.map.get(key)));\n            remainingRightKeys_1.delete(key);\n        });\n        remainingRightKeys_1.forEach(function (key) {\n            merged.map.set(key, mergeMergeTrees(right.map.get(key), left.map.get(key)));\n        });\n    }\n    return merged;\n}\nfunction mergeTreeIsEmpty(tree) {\n    return !tree || !(tree.info || tree.map.size);\n}\nfunction maybeRecycleChildMergeTree(_a, name) {\n    var map = _a.map;\n    var childTree = map.get(name);\n    if (childTree && mergeTreeIsEmpty(childTree)) {\n        emptyMergeTreePool.push(childTree);\n        map.delete(name);\n    }\n}\nvar warnings = new Set();\nfunction warnAboutDataLoss(existingRef, incomingObj, storeFieldName, store) {\n    var getChild = function (objOrRef) {\n        var child = store.getFieldValue(objOrRef, storeFieldName);\n        return typeof child === \"object\" && child;\n    };\n    var existing = getChild(existingRef);\n    if (!existing)\n        return;\n    var incoming = getChild(incomingObj);\n    if (!incoming)\n        return;\n    if (isReference(existing))\n        return;\n    if (equal(existing, incoming))\n        return;\n    if (Object.keys(existing).every(function (key) { return store.getFieldValue(incoming, key) !== void 0; })) {\n        return;\n    }\n    var parentType = store.getFieldValue(existingRef, \"__typename\") ||\n        store.getFieldValue(incomingObj, \"__typename\");\n    var fieldName = fieldNameFromStoreName(storeFieldName);\n    var typeDotName = \"\".concat(parentType, \".\").concat(fieldName);\n    if (warnings.has(typeDotName))\n        return;\n    warnings.add(typeDotName);\n    var childTypenames = [];\n    if (!isArray(existing) &&\n        !isArray(incoming)) {\n        [existing, incoming].forEach(function (child) {\n            var typename = store.getFieldValue(child, \"__typename\");\n            if (typeof typename === \"string\" &&\n                !childTypenames.includes(typename)) {\n                childTypenames.push(typename);\n            }\n        });\n    }\n    __DEV__ && invariant.warn(\"Cache data may be lost when replacing the \".concat(fieldName, \" field of a \").concat(parentType, \" object.\\n\\nTo address this problem (which is not a bug in Apollo Client), \").concat(childTypenames.length\n        ? \"either ensure all objects of type \" +\n            childTypenames.join(\" and \") + \" have an ID or a custom merge function, or \"\n        : \"\", \"define a custom merge function for the \").concat(typeDotName, \" field, so InMemoryCache can safely merge these objects:\\n\\n  existing: \").concat(JSON.stringify(existing).slice(0, 1000), \"\\n  incoming: \").concat(JSON.stringify(incoming).slice(0, 1000), \"\\n\\nFor more information about these options, please refer to the documentation:\\n\\n  * Ensuring entity objects have IDs: https://go.apollo.dev/c/generating-unique-identifiers\\n  * Defining custom merge functions: https://go.apollo.dev/c/merging-non-normalized-objects\\n\"));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}