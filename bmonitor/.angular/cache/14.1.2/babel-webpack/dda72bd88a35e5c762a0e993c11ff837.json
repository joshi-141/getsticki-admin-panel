{"ast":null,"code":"import { __assign } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\n\nvar OperationBatcher = function () {\n  function OperationBatcher(_a) {\n    var batchDebounce = _a.batchDebounce,\n        batchInterval = _a.batchInterval,\n        batchMax = _a.batchMax,\n        batchHandler = _a.batchHandler,\n        batchKey = _a.batchKey;\n    this.batchesByKey = new Map();\n    this.batchDebounce = batchDebounce;\n    this.batchInterval = batchInterval;\n    this.batchMax = batchMax || 0;\n    this.batchHandler = batchHandler;\n\n    this.batchKey = batchKey || function () {\n      return '';\n    };\n  }\n\n  OperationBatcher.prototype.enqueueRequest = function (request) {\n    var _this = this;\n\n    var requestCopy = __assign(__assign({}, request), {\n      next: [],\n      error: [],\n      complete: [],\n      subscribers: new Set()\n    });\n\n    var key = this.batchKey(request.operation);\n\n    if (!requestCopy.observable) {\n      requestCopy.observable = new Observable(function (observer) {\n        var batch = _this.batchesByKey.get(key);\n\n        if (!batch) _this.batchesByKey.set(key, batch = new Set());\n        var isFirstEnqueuedRequest = batch.size === 0;\n        var isFirstSubscriber = requestCopy.subscribers.size === 0;\n        requestCopy.subscribers.add(observer);\n\n        if (isFirstSubscriber) {\n          batch.add(requestCopy);\n        }\n\n        if (observer.next) {\n          requestCopy.next.push(observer.next.bind(observer));\n        }\n\n        if (observer.error) {\n          requestCopy.error.push(observer.error.bind(observer));\n        }\n\n        if (observer.complete) {\n          requestCopy.complete.push(observer.complete.bind(observer));\n        }\n\n        if (isFirstEnqueuedRequest) {\n          _this.scheduleQueueConsumption(key);\n        } else if (_this.batchDebounce) {\n          clearTimeout(_this.scheduledBatchTimer);\n\n          _this.scheduleQueueConsumption(key);\n        }\n\n        if (batch.size === _this.batchMax) {\n          _this.consumeQueue(key);\n        }\n\n        return function () {\n          var _a;\n\n          if (requestCopy.subscribers.delete(observer) && requestCopy.subscribers.size < 1) {\n            if (batch.delete(requestCopy) && batch.size < 1) {\n              _this.consumeQueue(key);\n\n              (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n            }\n          }\n        };\n      });\n    }\n\n    return requestCopy.observable;\n  };\n\n  OperationBatcher.prototype.consumeQueue = function (key) {\n    if (key === void 0) {\n      key = '';\n    }\n\n    var batch = this.batchesByKey.get(key);\n    this.batchesByKey.delete(key);\n\n    if (!batch || !batch.size) {\n      return;\n    }\n\n    var operations = [];\n    var forwards = [];\n    var observables = [];\n    var nexts = [];\n    var errors = [];\n    var completes = [];\n    batch.forEach(function (request) {\n      operations.push(request.operation);\n      forwards.push(request.forward);\n      observables.push(request.observable);\n      nexts.push(request.next);\n      errors.push(request.error);\n      completes.push(request.complete);\n    });\n    var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n\n    var onError = function (error) {\n      errors.forEach(function (rejecters) {\n        if (rejecters) {\n          rejecters.forEach(function (e) {\n            return e(error);\n          });\n        }\n      });\n    };\n\n    batch.subscription = batchedObservable.subscribe({\n      next: function (results) {\n        if (!Array.isArray(results)) {\n          results = [results];\n        }\n\n        if (nexts.length !== results.length) {\n          var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n          error.result = results;\n          return onError(error);\n        }\n\n        results.forEach(function (result, index) {\n          if (nexts[index]) {\n            nexts[index].forEach(function (next) {\n              return next(result);\n            });\n          }\n        });\n      },\n      error: onError,\n      complete: function () {\n        completes.forEach(function (complete) {\n          if (complete) {\n            complete.forEach(function (c) {\n              return c();\n            });\n          }\n        });\n      }\n    });\n    return observables;\n  };\n\n  OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n    var _this = this;\n\n    this.scheduledBatchTimer = setTimeout(function () {\n      _this.consumeQueue(key);\n    }, this.batchInterval);\n  };\n\n  return OperationBatcher;\n}();\n\nexport { OperationBatcher };","map":{"version":3,"names":["__assign","Observable","OperationBatcher","_a","batchDebounce","batchInterval","batchMax","batchHandler","batchKey","batchesByKey","Map","prototype","enqueueRequest","request","_this","requestCopy","next","error","complete","subscribers","Set","key","operation","observable","observer","batch","get","set","isFirstEnqueuedRequest","size","isFirstSubscriber","add","push","bind","scheduleQueueConsumption","clearTimeout","scheduledBatchTimer","consumeQueue","delete","subscription","unsubscribe","operations","forwards","observables","nexts","errors","completes","forEach","forward","batchedObservable","of","onError","rejecters","e","subscribe","results","Array","isArray","length","Error","concat","result","index","c","setTimeout"],"sources":["/Users/phoungeunvantho/B.COM/bmonitor.com/bmonitor/node_modules/@apollo/client/link/batch/batching.js"],"sourcesContent":["import { __assign } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nvar OperationBatcher = (function () {\n    function OperationBatcher(_a) {\n        var batchDebounce = _a.batchDebounce, batchInterval = _a.batchInterval, batchMax = _a.batchMax, batchHandler = _a.batchHandler, batchKey = _a.batchKey;\n        this.batchesByKey = new Map();\n        this.batchDebounce = batchDebounce;\n        this.batchInterval = batchInterval;\n        this.batchMax = batchMax || 0;\n        this.batchHandler = batchHandler;\n        this.batchKey = batchKey || (function () { return ''; });\n    }\n    OperationBatcher.prototype.enqueueRequest = function (request) {\n        var _this = this;\n        var requestCopy = __assign(__assign({}, request), { next: [], error: [], complete: [], subscribers: new Set() });\n        var key = this.batchKey(request.operation);\n        if (!requestCopy.observable) {\n            requestCopy.observable = new Observable(function (observer) {\n                var batch = _this.batchesByKey.get(key);\n                if (!batch)\n                    _this.batchesByKey.set(key, batch = new Set());\n                var isFirstEnqueuedRequest = batch.size === 0;\n                var isFirstSubscriber = requestCopy.subscribers.size === 0;\n                requestCopy.subscribers.add(observer);\n                if (isFirstSubscriber) {\n                    batch.add(requestCopy);\n                }\n                if (observer.next) {\n                    requestCopy.next.push(observer.next.bind(observer));\n                }\n                if (observer.error) {\n                    requestCopy.error.push(observer.error.bind(observer));\n                }\n                if (observer.complete) {\n                    requestCopy.complete.push(observer.complete.bind(observer));\n                }\n                if (isFirstEnqueuedRequest) {\n                    _this.scheduleQueueConsumption(key);\n                }\n                else if (_this.batchDebounce) {\n                    clearTimeout(_this.scheduledBatchTimer);\n                    _this.scheduleQueueConsumption(key);\n                }\n                if (batch.size === _this.batchMax) {\n                    _this.consumeQueue(key);\n                }\n                return function () {\n                    var _a;\n                    if (requestCopy.subscribers.delete(observer) &&\n                        requestCopy.subscribers.size < 1) {\n                        if (batch.delete(requestCopy) && batch.size < 1) {\n                            _this.consumeQueue(key);\n                            (_a = batch.subscription) === null || _a === void 0 ? void 0 : _a.unsubscribe();\n                        }\n                    }\n                };\n            });\n        }\n        return requestCopy.observable;\n    };\n    OperationBatcher.prototype.consumeQueue = function (key) {\n        if (key === void 0) { key = ''; }\n        var batch = this.batchesByKey.get(key);\n        this.batchesByKey.delete(key);\n        if (!batch || !batch.size) {\n            return;\n        }\n        var operations = [];\n        var forwards = [];\n        var observables = [];\n        var nexts = [];\n        var errors = [];\n        var completes = [];\n        batch.forEach(function (request) {\n            operations.push(request.operation);\n            forwards.push(request.forward);\n            observables.push(request.observable);\n            nexts.push(request.next);\n            errors.push(request.error);\n            completes.push(request.complete);\n        });\n        var batchedObservable = this.batchHandler(operations, forwards) || Observable.of();\n        var onError = function (error) {\n            errors.forEach(function (rejecters) {\n                if (rejecters) {\n                    rejecters.forEach(function (e) { return e(error); });\n                }\n            });\n        };\n        batch.subscription = batchedObservable.subscribe({\n            next: function (results) {\n                if (!Array.isArray(results)) {\n                    results = [results];\n                }\n                if (nexts.length !== results.length) {\n                    var error = new Error(\"server returned results with length \".concat(results.length, \", expected length of \").concat(nexts.length));\n                    error.result = results;\n                    return onError(error);\n                }\n                results.forEach(function (result, index) {\n                    if (nexts[index]) {\n                        nexts[index].forEach(function (next) { return next(result); });\n                    }\n                });\n            },\n            error: onError,\n            complete: function () {\n                completes.forEach(function (complete) {\n                    if (complete) {\n                        complete.forEach(function (c) { return c(); });\n                    }\n                });\n            },\n        });\n        return observables;\n    };\n    OperationBatcher.prototype.scheduleQueueConsumption = function (key) {\n        var _this = this;\n        this.scheduledBatchTimer = setTimeout(function () {\n            _this.consumeQueue(key);\n        }, this.batchInterval);\n    };\n    return OperationBatcher;\n}());\nexport { OperationBatcher };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}